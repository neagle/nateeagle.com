<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
  <title>Nate Eagle's Front-End Development Memoranda</title>
  <link href="http://neagle.github.com/"/>
  <link type="application/atom+xml" rel="self" href="http://neagle.github.com/atom.xml"/>
  <updated>2013-02-17T18:41:07-05:00</updated>
  <id>http://neagle.github.com/</id>
  <author>
    <name>Nate Eagle</name>
    <email>nate@nateeagle.com</email>
  </author>

  
    
  
    
  
    
  
    
  
    
          <entry>
            <id>http://neagle.github.com/2011/11/07/sharpening-the-vim</id>
            <link type="text/html" rel="alternate" href="http://neagle.github.com/2011/11/07/sharpening-the-vim/"/>
            <title>Sharpening the Vim</title>
            <updated>2011-11-07T00:00:00-05:00</updated>
            <author>
              <name>Nate Eagle</name>
              <uri>http://neagle.github.com/</uri>
            </author>
            <content type="html">&lt;p&gt;I&amp;#8217;m somewhat ambivalent about Franklin Covey in general, but I must acknowledge that using the metaphor &lt;a href=&quot;http://www.franklincovey.com/blog/tag/habit-7-sharpen-the-saw&quot;&gt;sharpening the saw&lt;/a&gt; to describe the vital habit of self-improvement is pretty awesome, largely because it implies that the most important thing in life is going around with a sharp-ass saw.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been a happy Vim user since &lt;a href=&quot;http://concisionandconcinnity.blogspot.com/&quot;&gt;Ian McCracken&lt;/a&gt; introduced me to it a couple years ago. I&amp;#8217;m not really sure it makes me a better programmer or person, especially since I&amp;#8217;m not really sure that editor speed is the limiting factor in my work productivity. (I can type much, much faster than I can usefully think. As &lt;a href=&quot;http://www.crockford.com/&quot;&gt;Douglas Crockford&lt;/a&gt; said at the recent Capitol JS Conference (paraphrased), &amp;#8220;Most of the time you spend programming isn&amp;#8217;t spent coding: it&amp;#8217;s spent staring into the abyss saying, &amp;#8216;My God, what have I done?&amp;#8217;&amp;#8221;)&lt;/p&gt;
&lt;p&gt;That said, Vim makes entering and editing text feel effortless and elegant rather than frustrating. And, really, if you enter/edit text for a living, priority number one is making it an enjoyable or at least endurable task. For me, the big thing is that I don&amp;#8217;t have to switch back and forth between a mouse and the keyboard.&lt;/p&gt;
&lt;p&gt;The best intro to Vim is probably just to pull up your terminal and type &lt;code&gt;vimtutor&lt;/code&gt;, an interactive tutorial that takes maybe twenty to thirty minutes. It&amp;#8217;ll teach you everything you need to know to get started. But as &lt;a href=&quot;http://yannesposito.com/&quot;&gt;Yann Esposito&lt;/a&gt; says in his excellent &lt;a href=&quot;http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/&quot;&gt;Learn Vim Progressively&lt;/a&gt; entry: &amp;#8220;Learning vim will be painful at first. It will take time. It will be a lot like playing a music instrument.&amp;#8221;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve used Vim for, I dunno, two years now, and it&amp;#8217;s easy to settle into ruts. I&amp;#8217;ve got ways of accomplishing everything I need, but they&amp;#8217;re not all elegant. Last week, &lt;a href=&quot;http://artzstudio.com&quot;&gt;Dave Artz&lt;/a&gt;, the AOLer who hired me (high five, Dave!) started trying out Vim. The last few days, he&amp;#8217;s IMed me repeatedly asking about different ways to do things, plenty of which I had to look up. It was a good reminder that there&amp;#8217;s lots I have yet to effectively learn or internalize, and that my ability to play this particular instrument still has plenty of room to grow.&lt;/p&gt;
&lt;p&gt;Which is awesome.  So: that lengthy introduction aside, these are a few of the things I&amp;#8217;ve had to look up that I want to write down so that I can remember them for the future.&lt;/p&gt;
&lt;h3&gt;Vim &amp;amp; pbcopy on OS X&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pbcopy&lt;/code&gt; and &lt;code&gt;pbpaste&lt;/code&gt; are the bees&amp;#8217; knees: they&amp;#8217;re commands that use OS X&amp;#8217;s system clipboard (&amp;#8220;paste board&amp;#8221; is the OS X name, I guess) via terminal.&lt;/p&gt;
&lt;p&gt;Adding this mapping to your &lt;code&gt;.vimrc&lt;/code&gt; will let you use &lt;code&gt;ctrl-x&lt;/code&gt; and &lt;code&gt;ctrl-c&lt;/code&gt; to cut/copy the current visual selection to OS X&amp;#8217;s pasteboard.&lt;/p&gt;
&lt;/notextile&gt;

Via &quot;drydevelopment.com&quot;:http://drydevelopment.com/blog/vim-pbcopy-on-os-x.

h3. Change the Colorscheme

This one's super dumb, but when I was trying to find a decent colorscheme for Vim (I'm using &quot;desert&quot;:http://www.vim.org/scripts/script.php?script_id=105), I kept closing Vim, editing my .vimrc, and reopening Vim. LIKE A CHUMP.

@:colorscheme desert@

h3. Using the Leader

I've been pretty resistant to customizing Vim. I don't like reassigning default functionality till I'm really sure I understand it. What if I break a feature I haven't discovered yet because of today's shortsightedness?

But Vim has a &quot;leader key&quot;:http://stevelosh.com/blog/2010/09/coming-home-to-vim/#using-the-leader, the entire role of which is to give you a whole bunch of blank namespace to create custom commands. The default is @\@, but Steve Losh (the dude who wrote the article I just linked to) argues (to me persuasively) that @,@ (the comma) is easier to reach and not used for anything else. Nice: the freedom to make useful custom stuff without worrying about messing things up for myself later on.

And, actually, &quot;that whole article&quot;:http://stevelosh.com/blog/2010/09/coming-home-to-vim/ is worth reading. He explains his whole @.vimrc@ file in the most detail I've encountered. Well, maybe I should say that he explains it with the fewest assumptions about existing knowledge on the part of his reader. Which I appreciate.

h3. jsBeautify

&quot;jsBeautify&quot;:http://www.vim.org/scripts/script.php?script_id=2727 will clean up messy, inconsistently formatted JavaScript file with a single command. Awesome, but I need to figure out how much work would be involved in modifying it to follow &quot;the jQuery style guidelines&quot;:http://docs.jquery.com/JQuery_Core_Style_Guidelines.

h3. Remove Unwanted Whitespace

It's simple to &quot;remove unwanted whitespace&quot;:http://vim.wikia.com/wiki/Remove_unwanted_spaces:

bq.. Delete all trailing whitespace (at the end of each line) with:

@:%s/\s\+$//@

More rarely, a user might want to delete whitespace at the beginning of each line:

@:%s/^\s\+@

h3. Comment Out a Range of Lines

Too lengthy to quote, here's &quot;the page&quot;:http://vim.wikia.com/wiki/Commenting_out_a_range_of_lines.

h3. Wrap visual selection in an HTML tag.

&lt;notextile&gt;&lt;p&gt;Put it in &lt;code&gt;~/.vim/scripts/wrapwithtag.vim&lt;/code&gt; and enable in &lt;code&gt;~/.vimrc&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:au Filetype html,xml source ~/.vim/scripts/wrapwithtag.vim&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When editing &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; file, visually highlight text and press {Leader} w, enter tag name.&lt;/p&gt;
&lt;h3&gt;Scrolling Quickly&lt;/h3&gt;
&lt;p&gt;I tend to move quickly around a file either by typing a linenumber + G (which is awesome but too precise to be useful, many times) or holding down &lt;code&gt;j&lt;/code&gt; or &lt;code&gt;k&lt;/code&gt;. (&lt;span class=&quot;caps&quot;&gt;LIKE&lt;/span&gt; A &lt;span class=&quot;caps&quot;&gt;CHUMP&lt;/span&gt;.)&lt;/p&gt;
&lt;p&gt;Scrolling is easy. The most useful, &lt;span class=&quot;caps&quot;&gt;IMHO&lt;/span&gt;, is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;^D ^U  scroll half a page up, down&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But there are &lt;a href=&quot;http://tnerual.eriogerg.free.fr/vimqrc.html&quot;&gt;others&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Adjust Window Size&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;vsplit&lt;/code&gt; is basically the killer feature of Vim. When I showed &lt;a href=&quot;http://artzstudio.com&quot;&gt;Dave&lt;/a&gt; that he could &lt;code&gt;split&lt;/code&gt;, &lt;code&gt;vsplit&lt;/code&gt;, and re&lt;code&gt;split&lt;/code&gt; any number of windows he chose on to infinity he basically flipped. I always keep my windows equally sized with &lt;code&gt;C-W + =&lt;/code&gt;, but he wanted to adjust the sizes.&lt;/p&gt;
&lt;p&gt;For vertically split windows, use &lt;code&gt;C-W + &amp;lt;&lt;/code&gt; to decrease the current window&amp;#8217;s size and &lt;code&gt;C-W + &amp;gt;&lt;/code&gt; to increase it.&lt;/p&gt;
&lt;p&gt;For horizintally split windows, use &lt;code&gt;C-W + plus&lt;/code&gt; to make the window taller. (That just broke my typographic convention. It&amp;#8217;s control-w plus the, uh, plus key.) Use &lt;code&gt;C-W + -&lt;/code&gt; to make the window shorter. (That wasn&amp;#8217;t much better, was it?)&lt;/p&gt;
&lt;h3&gt;Clear Search Results with Leader + Space&lt;/h3&gt;
&lt;p&gt;I usually clear search results by typing &lt;code&gt;/&lt;/code&gt; plus a furious smattering of random letters. Crudely effective. But with the new leader key, I was willing to bind &lt;code&gt;leader + space&lt;/code&gt; to accomplish this more elegantly.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;&amp;lt;space&amp;gt; :noh&amp;lt;cr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Add a line of equal signs for documentation&lt;/h3&gt;
&lt;p&gt;Lines of equal signs look awesome. Proof:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Lines of Equal Signs Look Awesome
=================================&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bind &lt;code&gt;leader + 1&lt;/code&gt; (or, you know, &lt;code&gt;leader&lt;/code&gt; + &lt;span class=&quot;caps&quot;&gt;ANYTHING&lt;/span&gt;) to create a new line below your current line of the same length of equal signs. Nice!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;1 yypVr=&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;More Later&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ll add more to another entry whenever I&amp;#8217;ve got too many Vim-related tabs open in Chrome.&lt;/p&gt;</content>
          </entry>
    
  
    
  
    
          <entry>
            <id>http://neagle.github.com/2011/10/02/animate-anything-with-jquerys-animate</id>
            <link type="text/html" rel="alternate" href="http://neagle.github.com/2011/10/02/animate-anything-with-jquerys-animate/"/>
            <title>Animate Anything With jQuery's .animate()</title>
            <updated>2011-10-02T00:00:00-04:00</updated>
            <author>
              <name>Nate Eagle</name>
              <uri>http://neagle.github.com/</uri>
            </author>
            <content type="html">&lt;p&gt;jQuery&amp;#8217;s .animate() function is lovely: it&amp;#8217;s got great queueing built in and makes animating in JS totally painless. But it&amp;#8217;s limited to &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; properties. You can animate opacity, position, and more, but if you want to animate something in a very customized way, it&amp;#8217;s not as obvious how .animate() can help you.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d been meaning to try working around this a while ago, but I never got around to it. This weekend at the jQuery conference in Boston, I saw &lt;a href=&quot;http://gnarf.net/&quot;&gt;Corey Frang&lt;/a&gt; give a nice talk about how animation works in jQuery. He pointed out that it&amp;#8217;d be awfully nice to be able to be able to use .animate() without needing a &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; property and that he&amp;#8217;s hoping it can get worked into the 1.7 release for jQuery. He pointed out that it&amp;#8217;s possible to work around the requirement right now, though, by using a fake &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; property, and he showed an example by &lt;a href=&quot;http://benalman.com/&quot;&gt;Cowboy&lt;/a&gt; (Ben Alman) that animated a string of text in a really cool way: it began with all of the text hidden, then it progressively revealed the text as it if it were unrolling, or being typed in. It even used a bounce effect (via easing). This was a perfect example of a great effect that makes sense to use .animate() for, but sure as hell isn&amp;#8217;t a &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; property.&lt;/p&gt;
&lt;p&gt;So I decided to try to recreate Cowboy&amp;#8217;s example on my own.&lt;/p&gt;
&lt;style&gt;
p.animate {
background-color: #222;
border: 10px solid #555;
border-radius: 10px;
box-shadow: 0 0 1em #000;
margin: 1em 0;
padding: 20px;
position: relative;
width: 400px;
}
p.animate:before {
border: 2px solid #222;
border-radius: 5px;
bottom: -2px;
content: &amp;#8217;&amp;#8217;;
display: block;
left: -2px;
position: absolute;
right: -2px;
top: -2px;
}
.invisible {
opacity: 0;
}
&lt;/style&gt;
&lt;select class=&quot;easing&quot;&gt;&lt;/select&gt; &lt;button class=&quot;animate&quot;&gt;Animate&lt;/button&gt;
&lt;p class=&quot;animate&quot;&gt;Look, just because I don&amp;#8217;t be givin&amp;#8217; no man a foot massage don&amp;#8217;t make it right for Marsellus to throw Antwone into a glass motherfuckin&amp;#8217; house, fuckin&amp;#8217; up the way the n&amp;#8212;&amp;#8212;- talks. Motherfucker do that shit to me, he better paralyze my ass, &amp;#8216;cause I&amp;#8217;ll kill the motherfucker, know what I&amp;#8217;m sayin&amp;#8217;?  Your bones don&amp;#8217;t break, mine do. That&amp;#8217;s clear. Your cells react to bacteria and viruses differently than mine. You don&amp;#8217;t get sick, I do. That&amp;#8217;s also clear. But for some reason, you and I react the exact same way to water. We swallow it too fast, we choke. We get some in our lungs, we drown. However unreal it may seem, we are connected, you and I. We&amp;#8217;re on the same curve, just on opposite ends.&lt;/p&gt;
&lt;p&gt;Speed: &lt;input type=&quot;number&quot; value=&quot;10&quot; min=&quot;1&quot; max=&quot;1000&quot; class=&quot;speed&quot; /&gt; (lower is faster)&lt;/p&gt;
&lt;p&gt;(Placeholder text courtesy of &lt;a href=&quot;http://slipsum.com&quot;&gt;Samuel L. Ipsum&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The code&amp;#8217;s dead simple.&lt;/p&gt;
&lt;p&gt;&lt;/notextile&gt;&lt;/p&gt;
&lt;p&gt;(Here&amp;#8217;s &lt;a href=&quot;http://jsfiddle.net/nate/Grt5e/&quot;&gt;the same code in a fiddle&lt;/a&gt; if you&amp;#8217;d like to play.)&lt;/p&gt;
&lt;p&gt;The animation itself is surprisingly smooth. I have it output the latter segment of the text string so that the element containing the text doesn&amp;#8217;t change shape and size as it appears. It also prevents having the first few letters of words at the ends of lines appear before dropping the word to the line below as it gets long enough to wrap. Sometimes this might be a desireable effect: if you want it to look like the words are being typed live, for instance. In that case, just omit the span and the second substring.&lt;/p&gt;
&lt;p&gt;Anyway: I guess it&amp;#8217;s time to hunt down Cowboy&amp;#8217;s example and see how I could have made mine better. I&amp;#8217;m also eager to try other inventive ways to animate page elements &amp;#8211; now it&amp;#8217;s just a matter of getting the idea.&lt;/p&gt;</content>
          </entry>
    
  
    
  
    
          <entry>
            <id>http://neagle.github.com/2011/09/21/easier-post-creation-for-jekyll-with-bash</id>
            <link type="text/html" rel="alternate" href="http://neagle.github.com/2011/09/21/easier-post-creation-for-jekyll-with-bash/"/>
            <title>Easier Post Creation for Jekyll with Bash</title>
            <updated>2011-09-21T00:00:00-04:00</updated>
            <author>
              <name>Nate Eagle</name>
              <uri>http://neagle.github.com/</uri>
            </author>
            <content type="html">&lt;p&gt;The biggest reason to use &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt; is, in my opinion, its simplicity and convenience for people who work with files for a living. If changing directories and making files is what you do all day, then writing posts by creating files will just feel like The Way It Should Be. You&amp;#8217;ll love that you don&amp;#8217;t have to log into a web interface to add posts. If you&amp;#8217;d &lt;em&gt;rather&lt;/em&gt; log into a web app, I&amp;#8217;m not sure why on earth you&amp;#8217;d use Jekyll: it&amp;#8217;s too minimalistic to offer any huge advantages over the many great CMSs out there today.&lt;/p&gt;
&lt;p&gt;After a few weeks of using Jekyll, I found that it was a bit of a chore to think of today&amp;#8217;s date and type it out whenever I wanted to create a post. Since I was adding a second post type called bits to my blog for frequent, short posts it became even more of an issue.&lt;/p&gt;
&lt;p&gt;So I created a bash script to make this easier.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve written about three or four bash scripts in my entire life, so it takes me a bit of time and work to look everything up. In case you&amp;#8217;re in the same boat, I&amp;#8217;m including the script below along with URLs for the references I used along with a few notes.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the complete script:&lt;/p&gt;
&lt;/notextile&gt;

You'll notice I created a layout option that can be passed in using @-l@. I use multiple post layouts on the blog, the most important of which are *post* and *bit*. Bits are very small posts that aren't included in the main list on the homepage or in my Atom feed.

I created two aliases (these should go in your @.bashrc@ file) to simplify creation of posts and bits:

&lt;notextile&gt;&lt;p&gt;The script uses post as the default type. On running, the script&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;prompts me for a title&lt;/li&gt;
	&lt;li&gt;uses today&amp;#8217;s date plus a lowercase and dash-separated version of the title for the new post&amp;#8217;s filename&lt;/li&gt;
	&lt;li&gt;prepopulates the post with the &lt;span class=&quot;caps&quot;&gt;YAML&lt;/span&gt; I use for posts&lt;/li&gt;
	&lt;li&gt;opens the new post in vim&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So to create this post, I typed:&lt;/p&gt;
&lt;/notextile&gt;

This created @2011-09-21-easier-post-creation-for-jekyll-with-bash.textile@, added my YAML, and popped it up in vim. Nice.

h3. One last item on my wish list 

I'd really like to find a solution for tab completion when I have a directory full of similarly prefixed files.

&lt;notextile&gt;&lt;p&gt;If I have a directory like the one above, I&amp;#8217;d love to be able to type &lt;code&gt;col&amp;lt;TAB&amp;gt;&lt;/code&gt; and have it expand to &lt;code&gt;2011-09-11-color-ripples-canvas-toy.textile&lt;/code&gt;. In other words, the completion regex would match for a date string and disregard that prefix when matching filenames.&lt;/p&gt;
&lt;p&gt;This may well be possible &amp;#8211; even trivial &amp;#8211; for someone smarter than I. I did find a great example of &lt;a href=&quot;http://stackoverflow.com/questions/3238983/writing-a-custom-bash-completion-rule&quot;&gt;something similar&lt;/a&gt; for vim that&amp;#8217;ll let you add a &lt;code&gt;.completion&lt;/code&gt; file to any directory with a static prefix that will allow you to type, say, &lt;code&gt;vim &amp;lt;TAB&amp;gt;&lt;/code&gt; and have it expand to &lt;code&gt;vim _myprefix&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let me know if you have any suggestions for my bash script &amp;#8211; as I said, I&amp;#8217;m a bash n00b, and feedback is welcome.&lt;/p&gt;</content>
          </entry>
    
  
    
  
    
          <entry>
            <id>http://neagle.github.com/2011/09/11/color-ripples-canvas-toy</id>
            <link type="text/html" rel="alternate" href="http://neagle.github.com/2011/09/11/color-ripples-canvas-toy/"/>
            <title>Color Ripples: a Canvas Toy</title>
            <updated>2011-09-11T00:00:00-04:00</updated>
            <author>
              <name>Nate Eagle</name>
              <uri>http://neagle.github.com/</uri>
            </author>
            <content type="html">&lt;p&gt;Here&amp;#8217;s a little bit of colorful distraction for a rainy afternoon.&lt;/p&gt;
&lt;p&gt;&lt;iframe style=&quot;width: 100%; height: 500px&quot; src=&quot;http://jsfiddle.net/nate/dyVPR/embedded/result,js,html&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Playing with &lt;code&gt;canvas&lt;/code&gt; is fun. However, you may notice, if you glance through the code, that there are really only five lines of code that are canvas-specific. (A few more if you count the setup.)&lt;/p&gt;
&lt;p&gt;&lt;/notextile&gt;&lt;/p&gt;
&lt;p&gt;This is the code for, well, drawing a circle. &lt;em&gt;All&lt;/em&gt; of the rest of it is just various math and adjustments on where and how to draw those circles.&lt;/p&gt;
&lt;p&gt;I spent basically all of my highschool math courses messing around with &lt;a href=&quot;http://education.ti.com/educationportal/sites/US/productDetail/us_ti83p.html&quot;&gt;my graphing calculator&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/TI-BASIC&quot;&gt;TI Basic&lt;/a&gt;. I made a little magic eight ball program that gave different responses based on a random number; I made programs to take care of the quadratic equation for me. (Note: I spent more time fussing with the formatting and look of the UI for entering numbers than I did with the calculations &amp;#8211; I was a front-end developer in the making!) I finally dropped out of AP Calculus when being clever about my calculator could no longer make up for the fact that I wasn&amp;#8217;t learning a lick of math.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m grateful for what exposure I had to code &amp;#8211; ultimately, even that time messing with TI Basic helped me find my way to a great career. But I can&amp;#8217;t help but wish that somebody &amp;#8211; &lt;em&gt;any&lt;/em&gt; adult in my life &amp;#8211; had noticed that I spent all my time trying vainly to do stuff with computers and said, &amp;#8220;You know, that might not be so wholly irrelevant to his future&amp;#8230;&amp;#8221;&lt;/p&gt;
&lt;p&gt;As far as I can tell, every developer I know fends off multiple unsolicited recruitment emails a month: America needs people to write code and it wants to pay them for it. My school acted like the most important thing about computers was making sure we didn&amp;#8217;t check our email on the &lt;em&gt;for-research&lt;/em&gt; computers in the library. (I got Saturday school for this once.) Couldn&amp;#8217;t the public schools have noticed that education in computers &amp;amp; code might be a good investment back in the &amp;#8217;90s?&lt;/p&gt;
&lt;p&gt;Couldn&amp;#8217;t there be a whole Math track for kids who&amp;#8217;re interested in applying it to code? Can you imagine how much fun it would have been to immediately try out the formula for slope on a visual toy you wrote as homework?&lt;/p&gt;
&lt;p&gt;For that matter: are public schools aware of this &lt;em&gt;now&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Anyway: I actually had a great highschool Math teacher. Hell, I&amp;#8217;d pay a lot of money at this point in my life to go back, sit in that musty portable classroom in Spanaway, Washington and have him teach me all about linear equations to help me draw pretty, moving pictures.&lt;/p&gt;</content>
          </entry>
    
  
    
          <entry>
            <id>http://neagle.github.com/2011/09/09/my-first-compass-mixin-text-3d</id>
            <link type="text/html" rel="alternate" href="http://neagle.github.com/2011/09/09/my-first-compass-mixin-text-3d/"/>
            <title>My First Compass Mixin: Text-3d</title>
            <updated>2011-09-09T00:00:00-04:00</updated>
            <author>
              <name>Nate Eagle</name>
              <uri>http://neagle.github.com/</uri>
            </author>
            <content type="html">&lt;p&gt;So I started using &lt;a href=&quot;http://compass-style.org/&quot;&gt;Compass&lt;/a&gt; because &lt;a href=&quot;http://twitter.com/#!/chriseppstein&quot;&gt;Chris Eppstein&lt;/a&gt; himself told me via a tweet that I should check it out. (I mentioned &lt;span class=&quot;caps&quot;&gt;SASS&lt;/span&gt; in a tweet, and Mr. Eppstein seems to be as dedicated a promoter as he is talented a developer.) Compass is pretty fantastic, though I will menition that it&amp;#8217;s not trivially easy to learn how to use effectively: I&amp;#8217;m still working on learning a lot of the ins and outs of using &lt;span class=&quot;caps&quot;&gt;SASS&lt;/span&gt; and mixins.&lt;/p&gt;
&lt;p&gt;I won&amp;#8217;t get too much into Compass itself &amp;#8211; part of the idea of this blog is to keep things short and simple &amp;#8211; but my favorite part of Compass is the mixins. These work like functions in JavaScript that let you pass in a minimal number of inputs and get out some more complex &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; as a result. This is great for simplifying CSS3, especially, which often requires outputing essentially the same information with the various vendor prefixes. Compass comes with a whole slew of them, but you can also define your own.&lt;/p&gt;
&lt;p&gt;While working on the design for this blog, I found myself using (as I often do) a small trick that uses multiple text shadows to create a 3d text effect.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/desandro-made-this.png&quot; title=&quot;David DeSandro Made This&quot; alt=&quot;David DeSandro Made This&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The technique was created, as far as I know, by &lt;a href=&quot;http://desandro.com/&quot;&gt;Dave DeSandro&lt;/a&gt;, one of the classiest folks in interaction design, who uses it prominently on his homepage. Regardless of its ultimate origin, that&amp;rsquo;s where I picked it up. It creates the illusion of blocky three-dimensional letters that have a side in shadows that stretches back in space. The &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; for it is easy to understand: it just uses the fact that the &lt;code&gt;text-shadow&lt;/code&gt; property can have multiple, comma-separated backgrounds.&lt;/p&gt;
&lt;/notextile&gt;

p. The shadow is made up of 1px layers, each offset slightly from the one that preceded it. Here&amp;rsquo;s an example that should make that obvious. (Note: example will not work in browsers that do not support @text-shadow@.)

&lt;style&gt;h3.example1 { color: white; font-family: Futura, Arial, sans-serif; font-size: 48px; font-weight: bold; text-shadow: 1px 1px gray, 2px 2px white, 3px 3px gray, 4px 4px white, 5px 5px gray; text-transform: uppercase; }&lt;/style&gt;

&lt;h3 class=&quot;example1&quot;&gt;Nate Eagle Made This&lt;/h3&gt;

&lt;notextile&gt;&lt;p&gt;I alternated the shadows between gray and white: you can see clearly how they stack. But if you make them a single color:&lt;/p&gt;
&lt;style&gt;h3.example2 { color: white; font-family: Futura, Arial, sans-serif; font-size: 48px; font-weight: bold; text-shadow: 1px 1px gray, 2px 2px gray, 3px 3px gray, 4px 4px gray, 5px 5px gray; text-transform: uppercase; }&lt;/style&gt;
&lt;h3 class=&quot;example2&quot;&gt;Nate Eagle Made This&lt;/h3&gt;
&lt;p&gt;&lt;/notextile&gt;&lt;/p&gt;
&lt;p&gt;&amp;hellip;it creates the illusion of a solid side, receding in space. Lovely, yeah? Only problem: it&amp;#8217;s kind of a complex declaration. And fiddling around with the color and size of the effect is annoyingly complex: you have to add and remove whole lines, change multiple numbers, change the name of the color multiple times.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s the perfect candidate for a mixin. Here&amp;rsquo;s &lt;a href=&quot;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#defining_a_mixin&quot;&gt;the documentation for defining a mixin&lt;/a&gt;. In this example, I&amp;rsquo;m going to reference another mixin &amp;ndash; Compass&amp;rsquo;s text-shadow plugin &amp;ndash; after generating the string of shadows I want.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; @mixin text-3d($size: 5, $directionX: 1, $directionY: 1, $blur: 1px, $color: black ) {
    @if unitless($blur) {
        @warn &quot;Assuming #{$blur} to be in pixels&quot;;
        $blur: 1px * $blur;
    }
    $string: '';
    @for $i from 1 through $size {
        $string: $string + ( #{$i * $directionX}px #{$i * $directionY}px $blur $color );
        @if $i &amp;lt; $size {
            $string: $string + ', ';
        }
    }
    @include text-shadow(
        #{$string}
    )
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty simple: this looks and works a lot like a function in JS/&lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt;. I accept a size parameter, which determines how many shadows to create (my examples above have five), then two direction parameters. This lets you send your 3d text down and to the right (1, 1), up and to the right (1, -1), up and to the left (-1, -1) or down and to the left (-1, 1). You can even use values like (-1, -0.5) to have the text go at 22.5&amp;deg; rather than 45&amp;deg;.&lt;/p&gt;
&lt;p&gt;Using the mixin is as simple as this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; @include text-3d( 3, -1, -1, 0, $someColor );
&lt;/code&gt;&lt;/pre&gt;</content>
          </entry>
    
  
    
          <entry>
            <id>http://neagle.github.com/2011/08/31/jekyll-not-parsing-includes</id>
            <link type="text/html" rel="alternate" href="http://neagle.github.com/2011/08/31/jekyll-not-parsing-includes/"/>
            <title>Jekyll not parsing includes?</title>
            <updated>2011-08-31T00:00:00-04:00</updated>
            <author>
              <name>Nate Eagle</name>
              <uri>http://neagle.github.com/</uri>
            </author>
            <content type="html">&lt;p&gt;This blog is hosted on GitHub and powered by &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;, a &amp;#8220;blog-aware, static site generator in Ruby&amp;#8221; that GitHub uses. Think of it as a way to build a blog that allows for some dynamic templating but is entirely driven by files. Quick tangent: if you build sites for a living but find yourself kind of exhausted with big, feature-rich CMSs by the time you come home, Jekyll just might be what it takes to make blogging for yourself fun again.&lt;/p&gt;
&lt;p&gt;To the main point: Jekyll&amp;#8217;s &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/liquid-extensions&quot;&gt;documentation boldly proclaims this&lt;/a&gt; about its includes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have small page fragments that you wish to include in multiple places on your site, you can use the &lt;code&gt;include&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;% include sig.textile %&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Jekyll expects all include files to be placed in an &lt;code&gt;_includes&lt;/code&gt; directory at the root of your source dir. So this will embed the contents of &lt;code&gt;/path/to/proto/site/_includes/sig.textile&lt;/code&gt; into the calling file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This might lead you to believe that Jekyll will parse Textile formatting in your included file (or Markdown formatting, for you infidels). &lt;strong&gt;But you would be mistaken&lt;/strong&gt;. Jekyll will do no such thing: it will blithely output anything you toss into that optimistically named &lt;code&gt;.textile&lt;/code&gt; or &lt;code&gt;.markdown&lt;/code&gt; file as unparsed text.&lt;/p&gt;
&lt;p&gt;It looks like I&amp;#8217;m not the only one with this problem: &lt;a href=&quot;http://groups.google.com/group/jekyll-rb/browse_thread/thread/216db15546e79073&quot;&gt;one&lt;/a&gt;, &lt;a href=&quot;https://github.com/mojombo/jekyll/issues/164&quot;&gt;two&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the moment, the only solution is to abandon our futile dreams of parsed includes and use straight html. But let&amp;#8217;s see if we can at least get the documentation changed.&lt;/p&gt;</content>
          </entry>
    
  
    
          <entry>
            <id>http://neagle.github.com/2011/08/31/how-to-output-curly-brackets-in-jekyll</id>
            <link type="text/html" rel="alternate" href="http://neagle.github.com/2011/08/31/how-to-output-curly-brackets-in-jekyll/"/>
            <title>How to output curly brackets in Jekyll</title>
            <updated>2011-08-31T00:00:00-04:00</updated>
            <author>
              <name>Nate Eagle</name>
              <uri>http://neagle.github.com/</uri>
            </author>
            <content type="html">&lt;p&gt;It&amp;#8217;s the little things that trip you up, right? Turns out it&amp;#8217;s &lt;a href=&quot;http://stackoverflow.com/questions/3330979/outputting-literal-curly-braces-in-liquid-templates&quot;&gt;not super easy&lt;/a&gt; to just output curly brackets / braces in combination with % symbols in Jekyll, which uses Liquid templates, for the not-crazy reason that these are used for its templating language. But if you want to use them for code examples, there&amp;#8217;s not really a straightforward way of using escape characters to let you output code.&lt;/p&gt;
&lt;p&gt;The example I linked to above suggests assigning your code example to a liquid variable, which is an okay solution, but a pain in neck. I came up with an alternative that works a bit better for me.&lt;/p&gt;
&lt;p&gt;As of version 0.5.2, Jekyll &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;lets you set arbitrary configuration variables&lt;/a&gt; in your &lt;code&gt;_config.yml&lt;/code&gt; that you can then access via &lt;code&gt;site.whatever&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I added:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lcb: &quot;{&quot;
rcb: &quot;}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;#8230;to my &lt;code&gt;_config.yml&lt;/code&gt;. The variable names stand for left curly bracket and right curly bracket, respectively.&lt;/p&gt;
&lt;p&gt;Whenever I need to use curly brackets in code examples, I just use those variables:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{ site.lcb }% foo | bar %{ site.lcb }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which will output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% foo | bar %&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Still not the greatest solution, but it made my life a lot easier.&lt;/p&gt;</content>
          </entry>
    
  
    
          <entry>
            <id>http://neagle.github.com/2011/08/30/upholstery-a-css3-pattern</id>
            <link type="text/html" rel="alternate" href="http://neagle.github.com/2011/08/30/upholstery-a-css3-pattern/"/>
            <title>Upholstery: a CSS3 Pattern</title>
            <updated>2011-08-30T00:00:00-04:00</updated>
            <author>
              <name>Nate Eagle</name>
              <uri>http://neagle.github.com/</uri>
            </author>
            <content type="html">&lt;p&gt;By now, you&amp;#8217;ve seen &lt;a href=&quot;leaverou.me/css3patterns/&quot;&gt;Lea Verou&amp;#8217;s CSS3 Patterns Gallery&lt;/a&gt;. I really dug it when I saw it a few months ago. There are some nice patterns in there (&lt;a href=&quot;http://leaverou.me/css3patterns/#carbon&quot;&gt;carbon&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://leaverou.me/css3patterns/#japanese-cube&quot;&gt;Japanese cube&lt;/a&gt; are my favorites) and I love generating graphics with code. &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; gradient syntax made my brain hurt, though, and the first time I tried creating a pattern of my own, I wasn&amp;#8217;t very successful.&lt;/p&gt;
&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;When I used &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; gradients, I tended to &lt;a href=&quot;http://www.colorzilla.com/gradient-editor/&quot;&gt;generate&lt;/a&gt; them. That worked okay, but the problem with a tool like that is that it can leave you forever dependent on UI elements and tedious fiddling to get the effect you want. &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; syntax shouldn&amp;#8217;t be so difficult that it requires a separate tool: the syntax is just a tool itself, after all, intended to make it easy to work with browser code more complicated than anything I&amp;#8217;ll ever write.&lt;/p&gt;
&lt;p&gt;So: we&amp;#8217;ve started up a new tradition at &lt;span class=&quot;caps&quot;&gt;AOL&lt;/span&gt; for front-end developers called the &lt;span class=&quot;caps&quot;&gt;FED&lt;/span&gt; Challenge. It&amp;#8217;s a biweekly contest that&amp;#8217;s supposed to encourage developers to try out new techniques and technologies they might not already know about, or to try their hand at something they&amp;#8217;re less familiar with. I decided to make the second &lt;span class=&quot;caps&quot;&gt;FED&lt;/span&gt; challenge creating a CSS3 Pattern ala the examples in Verou&amp;#8217;s gallery, which gave me a chance to finally get past my gradient brain pain.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m happy to report that it didn&amp;#8217;t take very long. Luckily for all of us, Webkit has &lt;a href=&quot;http://www.webkit.org/blog/1424/css3-gradients/&quot;&gt;changed its gradient syntax&lt;/a&gt; to match Mozilla&amp;#8217;s (clearly superior) syntax. And once I got an example in place in jsFiddle and started to play for a sustained amount of time, all the properties seemed to sort themselves out. (Play is, of course, one of the very best ways to internalize something you don&amp;#8217;t know.)&lt;/p&gt;
&lt;p&gt;Without further ado, here&amp;#8217;s my submission:&lt;/p&gt;
&lt;p&gt;&lt;iframe style=&quot;width: 100%; height: 630px&quot; src=&quot;http://jsfiddle.net/nate/37rxC/embedded/result,css,html,js&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;I was messing around with radial gradients and got the idea that they could be used to create the puffiness of upholstery as well as the shadowed dimples of the buttons. I think it turned out pretty nice.&lt;/p&gt;
&lt;p&gt;Check out the &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; in the tab up above for a highly-formatted, commented version of the &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, which I find helpful when trying to look through someone else&amp;#8217;s styles.&lt;/p&gt;
&lt;p&gt;If you prefer, however, here is the simplest, streamlined, non-vendor-prefixed version of the &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;/notextile&gt;&lt;/p&gt;
&lt;p&gt;I decided to submit the example to Verou after the contest, and she was kind enough to &lt;a href=&quot;http://leaverou.me/css3patterns/#upholstery&quot;&gt;add it to the gallery&lt;/a&gt;.&lt;/p&gt;</content>
          </entry>
    
  
 
</feed>
